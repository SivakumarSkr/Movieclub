# Generated by Django 2.1.7 on 2019-07-05 13:33

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import taggit.managers


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('groups', '0001_initial'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('taggit', '0003_taggeditem_add_unique_index'),
    ]

    operations = [
        migrations.AddField(
            model_name='groupblog',
            name='disliked',
            field=models.ManyToManyField(blank=True, related_name='groupblog_disliked', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='groupblog',
            name='group',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='blogs', to='groups.Group'),
        ),
        migrations.AddField(
            model_name='groupblog',
            name='liked',
            field=models.ManyToManyField(blank=True, related_name='groupblog_liked', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='groupblog',
            name='tags',
            field=taggit.managers.TaggableManager(blank=True, help_text='A comma-separated list of tags.', through='taggit.TaggedItem', to='taggit.Tag', verbose_name='Tags'),
        ),
        migrations.AddField(
            model_name='groupblog',
            name='user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='group',
            name='admins',
            field=models.ManyToManyField(blank=True, related_name='groups_admin', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='group',
            name='creator',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='group',
            name='followers',
            field=models.ManyToManyField(blank=True, related_name='groups_followed', to=settings.AUTH_USER_MODEL),
        ),
    ]
